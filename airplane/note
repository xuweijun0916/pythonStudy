# 飞机大战

# v1
- 主要作为技术验证
- 画出一个舞台，包括背景，包括一个小飞机

# v2
- 小蜜蜂会动，从上往下慢慢的飞
- 能控制小蜜蜂左右移动
- 入场算法
    - y轴要求是负数，这样会形成慢慢入场的效果
    - x轴要求是有一定的富裕，即要求蜜蜂等移动物体不能贴边
      基本上x轴的值应该是50起，最右边的计算方式边框宽度-物体宽度-富余值
- 移动速度问题
    - 包含x，y两个值
    - 对于绝大多数物体，则只考虑y值
    - 但是蜜蜂和英雄是特例
    - 蜜蜂从上向下移动的同时具有横向运动
    - 英雄的移动由上下左右键盘控制
    - 速度应该是一个tuple=(x,y)
    
- 方向问题
    - 具体移动方向由x,y控制
    - 值只能是-1，0，1
    - 应该是一个tuple
    - 例如（-1,0）表示水平向左移动
    - (0,1)表示向下移动
    
# v3
- 重构代码，使用oop方法
    - 世界的构成
        - 小飞机
        - 大飞机
        - 小蜜蜂
        - 子弹
        - 英雄机
        - 天空
    - BaseClass
        - img, some functions
        - position, fly into screen with postion(x, 0-height)
        - move 
    - SubClass
        - Bee
        - SmallPlane
        - Bigplane
        - Sky
        - Bullet
        _ hero
    - 配置文件
        - 可以通过一次性配置让程序正确运行
        - 降低了代码软件工程方面的成本
        - python的配置文件包：configParser
            - 以前就叫ConfigParser
            - 语法
                - 中括号：表示的是section
                - 每个section下是键值对
                - 键值对用等号或者冒号连接
             - get(section_name, key_name),返回相应的值
             - getint(section_name,key_name)
- 在oop的基础上创建小飞机，蜜蜂等，相对简单很多
- 程序可以正常产生飞行物，包括英雄机，子弹，云层

# v4 实现碰撞检测
- 碰撞检测算法是游戏通用算法，必须掌握
- 一旦判断发生碰撞
    - 生命值会发生改变
    - 生命状态发生改变
        - LIFE_STATUS_LIVE
        - LIFE_STATUS_DEAD:已经发生碰撞，播放死亡动画
        - LIFE_STATUS_REMOVABLE:可以移除
    - 如果生命状态为DEAD，则播放死亡动画
    
- 在处理小飞机的时候：
    - 初始化的时候把五张图片全部初始化完毕，让入list中
    - 考虑到资源小号，图片保存成类变量（所谓静态变量）
    - 正常播放的是第一张图片，一旦中弹，则连续播放其余四张图片

- 游戏状态
    - READY:游戏没有开始，显示一张准备图片
    - RUNNING:正常游戏运行
    - DONE: gameover,显示结束图片，注意游戏停止循环运行
    
- 游戏分数：
    - 一个变量，每次碰撞后检测对方身份，如果是子弹撞击对方，则直接根据敌人类型更改分数
    - 把分数提示显示在屏幕上

